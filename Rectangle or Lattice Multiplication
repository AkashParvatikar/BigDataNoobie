#include <stdio.h>
#include <string.h>
#define T 300

int S;
// Assuming both strings are of same length, if not zero padding is done to make the length of both the strings as same
struct multiplicationTable{
    int upperElements;
    int lowerElements;
};
struct multiplicationTable node[T][T];

static char number1[T];
static char number2[T];
static char x[T];
static char y[T];

// Stores the diagonal sums
int sum;

// Based on the value being even or odd it decides to get upper half or lower half elements
int p;


// Adds the diagonals
int addRecursive( int i, int j ){

    // Condition to terminate the addition
    if( j < 0 || i >= S )
        return sum;

    int value;


    // Whether to get the upperElements left corner or the lowerElements right corner.
    if( p % 2 ){
        value = node[i][j].upperElements;
        j = j - 1;
    }
    else{
        value = node[i][j].lowerElements;
        i = i + 1;
    }
    ++p;


    // Store the sum of the entire diagonal
    sum = sum + value;


    // Recursively visit all row and column by traversing
    addRecursive(i,j);

    return sum;
}

int main(){
	int key;
	do
	{

        printf("Enter 1 to perform multiplication: \n");
		scanf("%d",&key);
		if(key==1)
		{
			printf("Enter 1st string: \n");
			scanf("%s",number1);
            printf("Enter 2nd string: \n");
			scanf("%s",number2);  
        
		// Calculate the length of both the strings
        int length1 = strlen(number1);
        int length2 = strlen(number2);
		int l1,l2;
		int flag1=0,flag2=0;
	    
		for(int i=0;i<length1;i++)
		{
			// Manipulations to handle negative numbers
			if(number1[0]=='-')
			{
				flag1=1;
				l1=length1-1;
				for(int j=0;j<length1-1;j++)
					x[j]=number1[j+1];
			}
				
		}
		
		for(int i=0;i<length2;i++)
		{
			if(number2[0]=='-')
			{
				flag2=1;
				l2=length2-1;
				for(int j=0;j<length2-1;j++)
					y[j]=number2[j+1];
			}
		}
		
		for(int i=0;i<length1;i++)
		{
			if(number1[0]!='-')
			{
				l1=length1;
				for(int j=0;j<length1;j++)
					x[j]=number1[j];
			}
		}
		
		for(int i=0;i<length2;i++)
		{
			if(number2[0]!='-')
			{
				l2=length2;
				for(int j=0;j<length2;j++)
					y[j]=number2[j];
			}
		}
		

        // Adjustment to make the string size of both numbers equal
        if( l1 > l2 ){
            S = l1;

            int adjust = l1 - l2;

            for( int i = l1 - 1; i >= 0; --i )
                y[i + adjust] = y[i];

            for(int j = 0; j < adjust; ++j)
                y[j] = '0';

        }
        else if(l2 > l1){
            S = l2;

            int adjust = l2 - l1;

            for( int i = l2 - 1; i >= 0; --i )
                x[i + adjust] = x[i];

            for(int j = 0; j < adjust; ++j)
                x[j] = '0';

        }
        else S = l1;
		
        int k = S - 1;
		
        // Multiply the numbers digit by digit and store in the rectangle
        for( int i = 0; y[i]; ++i ){
            for( int j = 0; y[j]; ++j ){

                int num1 = x[k] - '0';
                int num2 = y[j] - '0';

                int multiply = num1 * num2;

                node[j][k].upperElements = multiply / 10;
                node[j][k].lowerElements = multiply % 10;

            }
            --k;
        }

        // Result of upperElements half
        int upperHalfValue[S];

        // Add upperElements half
        int i = S - 1;
        for(; i >= 0; --i){
            sum = 0;
            p = 1;
            upperHalfValue[i] = addRecursive(0, i);
        }


        // Result of lowerElements half
        int lowerHalfValue[S];

        // Add lowerElements half
        i = 0;
        for(; i < S; ++i){
            sum = 0;
			p = 0;
            lowerHalfValue[i] = addRecursive(i, S - 1);
        }



        // Combine upperElements and lowerElements left half to a single array to add and get the product value for further calculation
        int productValue[S + S];
        i = 0;
        for(; i < S; ++i )
            productValue[i] = upperHalfValue[i];
        for(k = 0; i < S + S; ++i, ++k )
            productValue[i] = lowerHalfValue[k];



        // If a cell has more than 9 then it should be added to the next cell.
        for( int i = S + S - 1; i >= 0; --i ){

            if( productValue[i] > 9 ){
                productValue[i - 1] = productValue[i - 1] + productValue[i] / 10;
                productValue[i] = productValue[i] % 10;
            }

        }

        for(i = 0; i < S + S; ++i)
            if(productValue[i]) break;

        bool zero = true;
        // checks for negative integer
		if(flag1!=flag2)
		{
			printf("-");
		for(; i < S + S; ++i)
			{
				
				printf("%d",productValue[i]);
				
				zero = false;
			}
                printf("\n");	
	}
		
		    else
				for(;i<S+S;++i)
				{
			printf("%d", productValue[i]);	
            zero = false;		
				}
			printf("\n");

        // If the product is zero
            if( zero )
            printf("0");

        printf("\n");
		}
		else 
			printf("End of the program");
	}
	while(key==1);
	return 0;
}
